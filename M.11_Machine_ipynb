{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "FciKI1V5NYQr",
        "outputId": "b0e525e7-e7c9-4e74-f533-d8ecf052a63f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Relatório de classificação para classificador SVC(gamma=0.001):\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      0.99      0.99        88\n",
            "           1       0.99      0.97      0.98        91\n",
            "           2       0.99      0.99      0.99        86\n",
            "           3       0.98      0.87      0.92        91\n",
            "           4       0.99      0.96      0.97        92\n",
            "           5       0.95      0.97      0.96        91\n",
            "           6       0.99      0.99      0.99        91\n",
            "           7       0.96      0.99      0.97        89\n",
            "           8       0.94      1.00      0.97        88\n",
            "           9       0.93      0.98      0.95        92\n",
            "\n",
            "    accuracy                           0.97       899\n",
            "   macro avg       0.97      0.97      0.97       899\n",
            "weighted avg       0.97      0.97      0.97       899\n",
            "\n",
            "\n",
            "Confusion Matriz:\n",
            "[[87  0  0  0  1  0  0  0  0  0]\n",
            " [ 0 88  1  0  0  0  0  0  1  1]\n",
            " [ 0  0 85  1  0  0  0  0  0  0]\n",
            " [ 0  0  0 79  0  3  0  4  5  0]\n",
            " [ 0  0  0  0 88  0  0  0  0  4]\n",
            " [ 0  0  0  0  0 88  1  0  0  2]\n",
            " [ 0  1  0  0  0  0 90  0  0  0]\n",
            " [ 0  0  0  0  0  1  0 88  0  0]\n",
            " [ 0  0  0  0  0  0  0  0 88  0]\n",
            " [ 0  0  0  1  0  1  0  0  0 90]]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x216 with 4 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x216 with 4 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from sklearn import datasets, svm, metrics\n",
        "from sklearn.model_selection import train_test_split\n",
        "digits = datasets.load_digits()\n",
        "_, axes = plt.subplots(nrows=1, ncols=4, figsize=(10, 3))\n",
        "for ax, image, label in zip(axes, digits.images, digits.target):\n",
        "    ax.set_axis_off()\n",
        "    ax.set_title('Treinamento: %i ' % label)\n",
        "n_samples= len(digits.images)\n",
        "data = digits.images.reshape((n_samples,-1))\n",
        "clf=svm.SVC(gamma=0.001)\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    data, digits.target, test_size=0.5, shuffle=False)\n",
        "clf.fit(X_train, y_train)\n",
        "predicted = clf.predict(X_test)\n",
        "_, axes = plt.subplots(nrows=1, ncols=4, figsize=(10,3))\n",
        "for ax, image, prediction in zip(axes, X_test, predicted):\n",
        "  ax.set_axis_off()\n",
        "  image = image.reshape(8,8)\n",
        "  ax.set_title(f'Predição: {prediction}')\n",
        "print(f'Relatório de classificação para classificador {clf}:\\n'\n",
        "  f'{metrics.classification_report(y_test, predicted)}\\n')\n",
        "import pickle\n",
        "modelo_treinado=pickle.dumps(clf)\n",
        "modelo_carregado = pickle.loads(modelo_treinado)\n",
        "modelo_carregado.predict([X_test[0]])\n",
        "X_test[0]\n",
        "modelo_carregado.predict([X_test[0]])\n",
        "disp = metrics.plot_confusion_matrix(clf, X_test, y_test)\n",
        "disp.figure_.suptitle('Confusion Matriz')\n",
        "print(f'Confusion Matriz:\\n{disp.confusion_matrix}')\n",
        "\n",
        "plt.show()"
      ]
    }
  ]
}
